//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CommandSubscribeService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientMachineRegisterInfo", Namespace="http://schemas.datacontract.org/2004/07/CommandScheduler.Infrastructure.Server.Da" +
        "taContracts")]
    public partial class ClientMachineRegisterInfo : object
    {
        
        private string IPAddressV4Field;
        
        private string MachineNameField;
        
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IPAddressV4
        {
            get
            {
                return this.IPAddressV4Field;
            }
            set
            {
                this.IPAddressV4Field = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MachineName
        {
            get
            {
                return this.MachineNameField;
            }
            set
            {
                this.MachineNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName
        {
            get
            {
                return this.UserNameField;
            }
            set
            {
                this.UserNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CommandResponse", Namespace="http://schemas.datacontract.org/2004/07/CommandScheduler.Infrastructure.Server.Re" +
        "sponse")]
    public partial class CommandResponse : object
    {
        
        private string ErrorMessageField;
        
        private bool IsSuccessField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage
        {
            get
            {
                return this.ErrorMessageField;
            }
            set
            {
                this.ErrorMessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSuccess
        {
            get
            {
                return this.IsSuccessField;
            }
            set
            {
                this.IsSuccessField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CommandInfo", Namespace="http://schemas.datacontract.org/2004/07/CommandScheduler.Infrastructure.Server.Da" +
        "taContracts")]
    public partial class CommandInfo : object
    {
        
        private string CommandTextField;
        
        private string IPAddressV4Field;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CommandText
        {
            get
            {
                return this.CommandTextField;
            }
            set
            {
                this.CommandTextField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IPAddressV4
        {
            get
            {
                return this.IPAddressV4Field;
            }
            set
            {
                this.IPAddressV4Field = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CommandSubscribeService.ICommandSubscribeService", CallbackContract=typeof(CommandSubscribeService.ICommandSubscribeServiceCallback))]
    public interface ICommandSubscribeService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandSubscribeService/RegisterClientMachine", ReplyAction="http://tempuri.org/ICommandSubscribeService/RegisterClientMachineResponse")]
        System.Threading.Tasks.Task<CommandSubscribeService.CommandResponse> RegisterClientMachineAsync(CommandSubscribeService.ClientMachineRegisterInfo regInfo);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    public interface ICommandSubscribeServiceCallback
    {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICommandSubscribeService/OnReceiveCommand")]
        void OnReceiveCommand(CommandSubscribeService.CommandInfo command);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    public interface ICommandSubscribeServiceChannel : CommandSubscribeService.ICommandSubscribeService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    public partial class CommandSubscribeServiceClientBase : System.ServiceModel.DuplexClientBase<CommandSubscribeService.ICommandSubscribeService>, CommandSubscribeService.ICommandSubscribeService
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public CommandSubscribeServiceClientBase(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance, CommandSubscribeServiceClientBase.GetDefaultBinding(), CommandSubscribeServiceClientBase.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.NetTcpBinding_ICommandSubscribeService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CommandSubscribeServiceClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration) : 
                base(callbackInstance, CommandSubscribeServiceClientBase.GetBindingForEndpoint(endpointConfiguration), CommandSubscribeServiceClientBase.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CommandSubscribeServiceClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(callbackInstance, CommandSubscribeServiceClientBase.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CommandSubscribeServiceClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, CommandSubscribeServiceClientBase.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CommandSubscribeServiceClientBase(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<CommandSubscribeService.CommandResponse> RegisterClientMachineAsync(CommandSubscribeService.ClientMachineRegisterInfo regInfo)
        {
            return base.Channel.RegisterClientMachineAsync(regInfo);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_ICommandSubscribeService))
            {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_ICommandSubscribeService))
            {
                return new System.ServiceModel.EndpointAddress(new System.Uri("net.tcp://localhost:8733/CommandService"), new System.ServiceModel.DnsEndpointIdentity("localhost"));
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return CommandSubscribeServiceClientBase.GetBindingForEndpoint(EndpointConfiguration.NetTcpBinding_ICommandSubscribeService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return CommandSubscribeServiceClientBase.GetEndpointAddress(EndpointConfiguration.NetTcpBinding_ICommandSubscribeService);
        }
        
        public enum EndpointConfiguration
        {
            
            NetTcpBinding_ICommandSubscribeService,
        }
    }
    
    public class OnReceiveCommandReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public OnReceiveCommandReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public CommandSubscribeService.CommandInfo command
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((CommandSubscribeService.CommandInfo)(this.results[0]));
            }
        }
    }
    
    public partial class CommandSubscribeServiceClient : CommandSubscribeServiceClientBase
    {
        
        public CommandSubscribeServiceClient(EndpointConfiguration endpointConfiguration) : 
                this(new CommandSubscribeServiceClientCallback(), endpointConfiguration)
        {
        }
        
        private CommandSubscribeServiceClient(CommandSubscribeServiceClientCallback callbackImpl, EndpointConfiguration endpointConfiguration) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl), endpointConfiguration)
        {
            callbackImpl.Initialize(this);
        }
        
        public CommandSubscribeServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new CommandSubscribeServiceClientCallback(), binding, remoteAddress)
        {
        }
        
        private CommandSubscribeServiceClient(CommandSubscribeServiceClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress)
        {
            callbackImpl.Initialize(this);
        }
        
        public CommandSubscribeServiceClient() : 
                this(new CommandSubscribeServiceClientCallback())
        {
        }
        
        private CommandSubscribeServiceClient(CommandSubscribeServiceClientCallback callbackImpl) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl))
        {
            callbackImpl.Initialize(this);
        }
        
        public event System.EventHandler<OnReceiveCommandReceivedEventArgs> OnReceiveCommandReceived;
        
        private void OnOnReceiveCommandReceived(object state)
        {
            if ((this.OnReceiveCommandReceived != null))
            {
                object[] results = ((object[])(state));
                this.OnReceiveCommandReceived(this, new OnReceiveCommandReceivedEventArgs(results, null, false, null));
            }
        }
        
        private class CommandSubscribeServiceClientCallback : object, ICommandSubscribeServiceCallback
        {
            
            private CommandSubscribeServiceClient proxy;
            
            public void Initialize(CommandSubscribeServiceClient proxy)
            {
                this.proxy = proxy;
            }
            
            public void OnReceiveCommand(CommandSubscribeService.CommandInfo command)
            {
                this.proxy.OnOnReceiveCommandReceived(new object[] {
                            command});
            }
        }
    }
}
